# -*- coding: utf-8 -*-
"""Auto Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fQd36sFilPqFawxAByxAPE0CGxXHphDH

# imports
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.ar_model import AutoReg
from sklearn.metrics import mean_squared_error
from dateutil.relativedelta import relativedelta
import datetime
import warnings

# Ignore specific warning categories
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

"""# preprocess data

## covid vs normal year
"""

df = pd.read_csv(r"https://raw.githubusercontent.com/forcept007/burglary-date/main/burglary.csv")
df['Month'] = pd.to_datetime(df['Month'], format='%Y-%m')
df['Month_num'] = df['Month'].dt.month.astype(int)
df['year_num'] = df['Month'].dt.year.astype(int)
# Rename the columns
df = df.rename(columns={'Month_num': 'm', 'year_num': 'year'})

# create 'ds' and convert it to datetime format
df['ds'] = pd.to_datetime(df['m'].astype(str) + '-' + df['year'].astype(str), format='%m-%Y')

# Define the start and end dates of the normal years
normal_start_date = pd.to_datetime('2017-01-01')
normal_end_date = pd.to_datetime('2019-12-31')

# Subset the DataFrame for the normal years
normal_df = df[(df['ds'] >= normal_start_date) & (df['ds'] <= normal_end_date)]

# create y
date_counts = normal_df.groupby('ds').transform('count')
normal_df["y"] = date_counts["year"]

# Subset the DataFrame for the COVID time period
covid_start_date = pd.to_datetime('2020-01-01')
covid_end_date = pd.to_datetime('2023-01-01')
covid_df = df[(df['ds'] >= covid_start_date) & (df['ds'] <= covid_end_date)]

# create y
date_counts = covid_df.groupby('ds').transform('count')
covid_df["y"] = date_counts["year"]

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(normal_df['ds'], normal_df['y'], label='Normal Years')
plt.plot(covid_df['ds'], covid_df['y'], label='COVID Years')
plt.xlabel('Date')
plt.ylabel('Total Cases')
plt.title('COVID Cases Over Normal Years')
plt.legend()
plt.show()

"""## process data on LSOA code and date

## covid data imputed 2020-2021 inclusive
"""

# Load the data
df = pd.read_csv(r"https://raw.githubusercontent.com/forcept007/burglary-date/main/burglary.csv")
df['Month'] = pd.to_datetime(df['Month'], format='%Y-%m')
df['Month_num'] = df['Month'].dt.month.astype(int)
df['year_num'] = df['Month'].dt.year.astype(int)

# Rename the columns
df = df.rename(columns={'Month_num': 'm', 'year_num': 'year'})

# create 'ds' and convert it to datetime format
df['ds'] = pd.to_datetime(df['m'].astype(str) + '-' + df['year'].astype(str), format='%m-%Y')
df = df[(df['ds'] < '2020-01-01') | (df['ds'] >= '2022-01-01')]



df = df.groupby(['ds', 'LSOA code']).size().reset_index(name='y')

# Create a new dataframe to store the interpolated data
interpolated_df = pd.DataFrame(columns=df.columns)
# Define the start and end dates for the gap
start_date = pd.to_datetime('2020-01-01')
end_date = pd.to_datetime('2022-01-01')

# Iterate over each LSOA code
for lsoa_code in df['LSOA code'].unique():
    # Select the subset of data for the current LSOA code
    lsoa_subset = df[df['LSOA code'] == lsoa_code]

    # Create a new DataFrame that includes all months from 2020-01-01 to 2023-03-01
    new_df2 = pd.DataFrame({'ds': pd.date_range(start='2020-01-01', end='2021-12-01', freq='MS')})

    # Compute the  average for each month using data from previous years
    new_df2['y'] = np.nan
    new_df2['LSOA code'] = np.nan
    for idx, row in new_df2.iterrows():
        month = row['ds'].month
        avg = lsoa_subset[lsoa_subset['ds'].dt.month == month]['y'].mean() #* (1 - row['weights'])
        avg = int(avg)
        new_df2.loc[idx, 'y'] = avg
        new_df2.loc[idx, 'LSOA code'] = lsoa_code

    new_df2['y'] = new_df2['y'].astype(int)
    

    # Concatenate the new DataFrame with the original DataFrame
    imputed_df = pd.concat([lsoa_subset, new_df2[['ds', 'y', 'LSOA code']]], axis=0)
    imputed_df = imputed_df.reset_index(drop=True) #reset index
    imputed_df.sort_values(by=['ds'], inplace=True) #sort by date 

    interpolated_df = interpolated_df.append(imputed_df)


interpolated_df.sort_values(by=['ds'], inplace=True) #sort by date 
interpolated_df = interpolated_df.reset_index(drop=True) #reset index
df = interpolated_df.copy()
df.to_csv("lsoa_crime_covid_adjusted", index=False)
df

"""# Auto regression model"""

df['ds'] = pd.to_datetime(df['ds'])  # Convert the 'Date' column to datetime
df.set_index('ds', inplace=True)  # Set 'Date' as the index

lsoa_codes = df['LSOA code'].unique()

df

"""## train per LSOA code"""

dic = {}

for code in lsoa_codes:
  df_lsoa = df[df['LSOA code'] == code]
  
  df_lsoa = df_lsoa[['y']]

  train_data = df_lsoa[df_lsoa.index.year < 2019]
  test_data = df_lsoa[df_lsoa.index.year == 2019]

  train_data = train_data.astype(float)  # Convert data to float
  test_data = test_data.astype(float)  # Convert data to float

  lag_order = 12  # Adjust the lag order as needed
  model = AutoReg(train_data, lags=lag_order)
  model_fit = model.fit()

  start_index = len(train_data)
  end_index = len(train_data) + len(test_data) - 1
  predictions = model_fit.predict(start=start_index, end=end_index)
  predictions = round(predictions)

  mse = mean_squared_error(test_data, predictions)
  rmse = np.sqrt(mse)
  dic[code] = rmse

  plt.figure(figsize=(10, 6))
  plt.plot(df_lsoa.index[-48:-28], df_lsoa['y'].values[-48:-28], label='Original Data')
  plt.plot(test_data.index, predictions, label='Predictions')
  plt.xlabel('Date')
  plt.ylabel('Crime')
  plt.title(f'LSOA code: {code}')
  plt.legend()
  plt.show()

for key, value in dic.items():
  print(f"LSOA code: {key}, RMSE: {value}")

"""## Average RMSE per LSOA code"""

print(f'average RMSE: {np.mean(list(dic.values()))}')

"""#Hyper parameter tuning Auto regression model"""

RMSES = []
lags = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]
for lag in lags:
  dic = {}
  for code in lsoa_codes:
    df_lsoa = df[df['LSOA code'] == code]
    
    df_lsoa = df_lsoa[['y']]

    train_data = df_lsoa[df_lsoa.index.year < 2019]
    test_data = df_lsoa[df_lsoa.index.year == 2019]

    train_data = train_data.astype(float)  # Convert data to float
    test_data = test_data.astype(float)  # Convert data to float

    lag_order = lag  # Adjust the lag order as needed
    model = AutoReg(train_data, lags=lag_order)
    model_fit = model.fit()

    start_index = len(train_data)
    end_index = len(train_data) + len(test_data) - 1
    predictions = model_fit.predict(start=start_index, end=end_index)
    predictions = round(predictions)

    mse = mean_squared_error(test_data, predictions)
    rmse = np.sqrt(mse)
    dic[code] = rmse
  
  RMSES.append(np.mean(list(dic.values())))
  print(f'Lag: {lag}; average RMSE: {np.mean(list(dic.values()))}')

#get the best score and corresponding hyperparameter value
best_index = RMSES.index(min(RMSES))
best_hyperparameter = lags[best_index]

print("")
print(f'Best lag: {best_hyperparameter}; RMSE: {RMSES[best_index]}')

"""# forecast """

df_forecast = pd.DataFrame(columns=['ds', 'y', 'LSOA code'])


for code in lsoa_codes:
  current_lsoa = pd.DataFrame(columns=['ds', 'y', 'LSOA code'])

  df_lsoa = df[df['LSOA code'] == code]
  df_lsoa = df_lsoa[['y']]
  df_lsoa = df_lsoa.astype(float)  # Convert data to float

  last_index = df_lsoa.index[-1]


  lag_order = 7  # Adjust the lag order as needed 
  model = AutoReg(df_lsoa, lags=lag_order)  # lag_order is determined from model selection
  model_fit = model.fit()

  num_steps = 12  # Adjust the number of future steps as needed

  forecast = model_fit.forecast(steps=num_steps)

  pred = model_fit.get_prediction(start=len(df_lsoa), end=len(df_lsoa) + num_steps - 1)
  forecast_values = pred.predicted_mean
  i = 1 
  for forecast in forecast_values:
    df_forecast = df_forecast.append({'ds': last_index + relativedelta(months=i), 'y': round(forecast), 'LSOA code': code}, ignore_index=True)
    current_lsoa = current_lsoa.append({'ds': last_index + relativedelta(months=i), 'y': round(forecast), 'LSOA code': code}, ignore_index=True)
    i+=1 

  confidence_intervals = pred.conf_int(alpha=0.05) # 95% confidence interval

  # crime can never be below 0 so clipping confidence intervals to reflect this
  lower_bound = confidence_intervals.iloc[:, 0].clip(lower=0)
  upper_bound = confidence_intervals.iloc[:, 1].clip(lower=0)

  # only showing last 3 years and then the 6 months forecast
  plt.figure(figsize=(10, 6))
  plt.plot(df_lsoa.index[-36:], df_lsoa['y'].values[-36:], label='Original Data')
  plt.plot(current_lsoa['ds'], current_lsoa['y'], label='Forecast')
  plt.fill_between(
      current_lsoa['ds'],
      lower_bound,
      upper_bound,
      color='gray',
      alpha=0.3,
      label='Confidence Intervals'
  )
  plt.xlabel('Date')
  plt.ylabel('Crime')
  plt.legend()
  plt.title(f'LSOA code: {code}')
  plt.show()

"""# Forecast Dataframe"""

#print forecast values
df_forecast

